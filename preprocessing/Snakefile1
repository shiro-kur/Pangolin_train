import pandas as pd
from scipy import stats
import glob
from pybedtools import BedTool

SPECIES = config["SPECIES"]

if SPECIES == "Human":
    REF = "GRCh38.primary_assembly.genome.fa"
    GTF = "gencode.v34.annotation.gtf"
    CHROMS = "chr1 chr2 chr3 chr4 chr5 chr6 chr7 chr8 chr9 chr10 chr11 chr12 chr13 chr14 chr15 chr16 chr17 chr18 chr19 chr20 chr21 chr22 chrX chrY"
elif SPECIES == "Macaque":
    REF = "Macaca_mulatta.Mmul_10.dna.toplevel.fa"
    GTF = "Macaca_mulatta.Mmul_10.100.chr.gtf"
    CHROMS = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 X Y"
elif SPECIES == "Mouse":
    REF = "GRCm38.primary_assembly.genome.fa"
    GTF = "gencode.vM25.annotation.gtf"
    CHROMS = "chr1 chr2 chr3 chr4 chr5 chr6 chr7 chr8 chr9 chr10 chr11 chr12 chr13 chr14 chr15 chr16 chr17 chr18 chr19 chrX chrY"
elif SPECIES == "Chimp":
    REF = "Pan_troglodytes.Pan_tro_3.0.dna.toplevel.fa"
    GTF = "Pan_troglodytes.Pan_tro_3.0.101.chr.gtf"
    CHROMS = "1 2A 2B 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 X Y"
elif SPECIES == "Rat":
    REF = "Rattus_norvegicus.Rnor_6.0.dna.toplevel.fa"
    GTF = "Rattus_norvegicus.Rnor_6.0.101.chr.gtf"
    CHROMS = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 X Y" 

FILE_IDS = "6110sTS.Macaque.Brain.14ypb.Male 6111sTS.Macaque.Brain.15ypb.Male 5396sTS.Macaque.Heart.14ypb.Male 6120sTS.Macaque.Heart.15ypb.Male 5482sTSm.Macaque.Liver.14ypb.Male 6114sTS.Macaque.Liver.14ypb.Male 5410sTS.Macaque.Testis.15ypb.Male 5435sTS.Macaque.Testis.14ypb.Male 5413sTS.Macaque.Brain.21ypb.Male 6121sTS.Macaque.Heart.20ypb.Male 5461sTS.Macaque.Brain.22ypb.Male 6076sTS.Macaque.Brain.3ypb.Male 6084sTS.Macaque.Brain.3ypb.Male 5422sTS.Macaque.Heart.3ypb.Male 5436sTS.Macaque.Heart.3ypb.Male 5454sTS.Macaque.Liver.3ypb.Male 6077sTS.Macaque.Liver.3ypb.Male 6085sTS.Macaque.Heart.8ypb.Female 6086sTS.Macaque.Liver.8ypb.Female 5501sTS.Macaque.Brain.9ypb.Male 5988sTS.Macaque.Brain.9ypb.Male 5420sTS.Macaque.Heart.9ypb.Male 5450sTS.Macaque.Heart.9ypb.Male 5425sTS.Macaque.Liver.9ypb.Male 5993sTS.Macaque.Liver.9ypb.Male 6089sTS.Macaque.Liver.9ypb.Female 5373sTS.Macaque.Testis.9ypb.Male 5414sTS.Macaque.Testis.9ypb.Male 1892sTS.Mouse.Brain.4wpb.Male 1896sTS.Mouse.Brain.4wpb.Male 1936sTS.Mouse.Brain.4wpb.Female 1940sTS.Mouse.Brain.4wpb.Female 2655sTS.Mouse.Heart.4wpb.Female 2657sTS.Mouse.Heart.4wpb.Female 2659sTS.Mouse.Heart.4wpb.Male 2661sTS.Mouse.Heart.4wpb.Male 1894sTS.Mouse.Liver.4wpb.Male 1898sTS.Mouse.Liver.4wpb.Male 1938sTS.Mouse.Liver.4wpb.Female 1942sTS.Mouse.Liver.4wpb.Female 1895sTS.Mouse.Testis.4wpb.Male 1899sTS.Mouse.Testis.4wpb.Male 1944sTS.Mouse.Brain.9wpb.Male 1948sTS.Mouse.Brain.9wpb.Female 1954sTS.Mouse.Brain.9wpb.Male 1960sTS.Mouse.Brain.9wpb.Female 1950sTS.Mouse.Heart.9wpb.Female 1956sTS.Mouse.Heart.9wpb.Male 2663sTS.Mouse.Heart.9wpb.Male 2669sTS.Mouse.Heart.9wpb.Female 1946sTS.Mouse.Liver.9wpb.Male 1952sTS.Mouse.Liver.9wpb.Female 1958sTS.Mouse.Liver.9wpb.Male 1962sTS.Mouse.Liver.9wpb.Female 1947sTS.Mouse.Testis.9wpb.Male 1959sTS.Mouse.Testis.9wpb.Male 5822sTS.Human.Heart.13ypb.Male 5526sTS.Human.Testis.16ypb.Male 5532sTS.Human.Brain.16ypb.Male 5546sTS.Human.Testis.17ypb.Male 5575sTS.Human.Liver.17ypb.Male 5518sTS.Human.Testis.55ypb.Male 5512sTS.Human.Liver.58ypb.Male 5524sTS.Human.Brain.58ypb.Male 5571sTS.Human.Liver.58ypb.Male 5836sTS.Human.Heart.127dpb.Male 5818sTS.Human.Heart.226dpb.Male 6095sTS.Human.Testis.46ypb.Male 6043sTS.Human.Heart.54ypb.Male 6106sTS.Human.Liver.55ypb.Male 5843sTS.Human.Heart.0dpb.Female 5905sTS.Human.Heart.94dpb.Male 5513sTS.Human.Liver.7ypb.Male 5537sTS.Human.Brain.8ypb.Male 6100sTS.Human.Heart.4ypb.Female 6042sTS.Human.Heart.25ypb.Male 6048sTS.Human.Brain.28ypb.Male 6107sTS.Human.Testis.28ypb.Male 5531sTS.Human.Brain.29ypb.Male 5535sTS.Human.Testis.29ypb.Male 5536sTS.Human.Liver.29ypb.Male 5566sTS.Human.Testis.29ypb.Male 5908sTS.Human.Brain.29ypb.Male 5533sTS.Human.Brain.39ypb.Male 5550sTS.Human.Testis.39ypb.Male 5551sTS.Human.Liver.39ypb.Male 5563sTS.Human.Liver.39ypb.Male 5574sTS.Human.Brain.39ypb.Male 1875sTS.Rat.Brain.6wpb.Male 1975sTS.Rat.Brain.6wpb.Female 2356sTS.Rat.Brain.16wpb.Male 2369sTS.Rat.Testis.16wpb.Male 2747sTS.Rat.Heart.16wpb.Male 1969sTS.Rat.Liver.6wpb.Male 2287sTS.Rat.Liver.6wpb.Female 2358sTS.Rat.Testis.16wpb.Male 2370sTS.Rat.Liver.16wpb.Male 2749sTS.Rat.Heart.16wpb.Male 1970sTS.Rat.Testis.6wpb.Male 2348sTS.Rat.Brain.16wpb.Female 2359sTS.Rat.Liver.16wpb.Male 2738sTS.Rat.Heart.6wpb.Female 2751sTS.Rat.Heart.6wpb.Male 1971sTS.Rat.Brain.6wpb.Male 2351sTS.Rat.Liver.16wpb.Female 2363sTS.Rat.Brain.6wpb.Female 2740sTS.Rat.Heart.6wpb.Female 2853sTS.Rat.Heart.16wpb.Female 1973sTS.Rat.Liver.6wpb.Male 2352sTS.Rat.Brain.16wpb.Female 2366sTS.Rat.Liver.6wpb.Female 2742sTS.Rat.Heart.6wpb.Male 1974sTS.Rat.Testis.6wpb.Male 2355sTS.Rat.Liver.16wpb.Female 2367sTS.Rat.Brain.16wpb.Male 2746sTS.Rat.Heart.16wpb.Female".split()

tmp = []
for file in FILE_IDS:
    if SPECIES in file:
        tmp.append(file)
FILE_IDS = tmp

rule all:
     input:
         expand("bams/{id}.filtered.SpliSER.tsv", id=FILE_IDS),
         expand("{id}.rsem.genes.results", id=FILE_IDS)

rule bam_to_fastq:
    input:
        "{id}.bam"
    output:
        "{id}.fastq.gz"
    shell:
        "samtools fastq {input} | gzip > {output}"

# actually not needed
#rule trim_adapters:
#    input:
#        "{id}.fastq.gz"
#    output:
#        "{id}.trimmed.fastq.gz"
#    shell:
#        "fastp -i {input} -o {output} --disable_quality_filtering --disable_length_filtering"

rule build_index:
    input:
        loc="STAR_%s" % SPECIES,
        fa=REF,
        gtf=GTF,
        path_to_STAR="/project2/yangili1/tonyzeng/software/STAR-2.7.5a/bin/Linux_x86_64/"
    output:
        "STAR_%s/SAindex" % SPECIES
    threads: 16
    shell:
        "{input.path_to_STAR}STAR "
        "--runMode genomeGenerate "
        "--genomeDir {input.loc} "
        "--genomeFastaFiles {input.fa} "
        "--sjdbGTFfile {input.gtf} "
        "--runThreadN {threads} "
        "--limitGenomeGenerateRAM 50000000000"

rule first_pass:
     input:
         "STAR_%s/SAindex" % SPECIES,
         loc="STAR_%s" % SPECIES,
         fq="{id}.fastq.gz",
         path_to_STAR="/project2/yangili1/tonyzeng/software/STAR-2.7.5a/bin/Linux_x86_64/"
     output:
         output_bam="bams/{id}.p1.Aligned.sortedByCoord.out.bam",
         output_SJ="bams/{id}.p1.SJ.out.tab"
     threads: 16
     shell:
         "{input.path_to_STAR}STAR "
         "--genomeDir {input.loc} "
         "--readFilesIn {input.fq} "
         "--readFilesCommand gunzip -c "
         "--outSAMtype BAM SortedByCoordinate "
         "--outFileNamePrefix bams/{wildcards.id}.p1. "
         "--runThreadN {threads} "
         "--genomeLoad LoadAndRemove "
         "--limitBAMsortRAM 50000000000"

rule merge_splice_junctions:
     input:
         sjs = expand("bams/{id}.p1.SJ.out.tab", id = FILE_IDS)
     output:
         sjs = "bams/SJ.out.p1_merged.%s.tab" % SPECIES
     shell:
         # Retain splice junctions with at least 3 uniquely mapped fragments per sample.
         "cat {input.sjs} | awk '$7 >= 3' | cut -f1-4 | sort -u > {output.sjs}"

rule second_pass:
     input:
         loc="STAR_%s" % SPECIES,
         fq="{id}.fastq.gz",
         path_to_STAR="/project2/yangili1/tonyzeng/software/STAR-2.7.5a/bin/Linux_x86_64/",
         sjs="bams/SJ.out.p1_merged.%s.tab" % SPECIES
     output:
         output_bam="bams/{id}.p2.Aligned.sortedByCoord.out.bam",
         transcriptome_bam="bams/{id}.p2.Aligned.toTranscriptome.out.bam",
         output_SJ="bams/{id}.p2.SJ.out.tab"
     threads: 16
     shell:
         "{input.path_to_STAR}STAR "
         "--genomeDir {input.loc} "
         "--readFilesIn {input.fq} "
         "--readFilesCommand gunzip -c "
         "--sjdbFileChrStartEnd {input.sjs} "
         "--outSAMtype BAM SortedByCoordinate "
         "--outFileNamePrefix bams/{wildcards.id}.p2. "
         "--runThreadN {threads} "
         "--outFilterType BySJout "
         "--outFilterMultimapNmax 20 "
         "--alignSJoverhangMin 8 "
         "--alignSJDBoverhangMin 1 "
         "--outFilterMismatchNmax 999 "
         "--outFilterMismatchNoverReadLmax 0.04 "
         "--alignIntronMin 20 "
         "--alignIntronMax 1000000 "
         "--alignMatesGapMax 1000000 "
         "--quantMode TranscriptomeSAM "

rule rsem_index:
    input:
        fa=REF,
        gtf=GTF
    output:
        "RSEM_%s.idx.fa" % SPECIES
    params:
        "RSEM_%s" % SPECIES
    threads: 16
    shell:
        "./RSEM-1.3.3/rsem-prepare-reference -p 16 --gtf {input.gtf} {input.fa} {params}"

rule rsem:
    input:
        bam="bams/{id}.p2.Aligned.toTranscriptome.out.bam",
        loc="RSEM_%s.idx.fa" % SPECIES
    output:
        "{id}.rsem.genes.results"
    params:
        "RSEM_%s" % SPECIES
    threads: 16
    shell:
        "./RSEM-1.3.3/rsem-calculate-expression --num-threads {threads} --alignments {input.bam} {params} {wildcards.id}.rsem"

# TruSeq
rule add_strand:
    input:
        bam="bams/{id}.p2.Aligned.sortedByCoord.out.bam",
        path="/project2/yangili1/tonyzeng/software/STAR-2.7.5a/extras/scripts/"
    output:
        "bams/{id}.p2.Aligned.sortedByCoord.XS.out.bam"
    shell:
        "samtools view -h {input.bam} | awk -v strType=2 -f {input.path}tagXSstrandedData.awk | samtools view -bS - > {output}"

rule sort_by_read:
    input:
        "bams/{id}.p2.Aligned.sortedByCoord.XS.out.bam"
    output:
        "bams/{id}.p2.Aligned.sortedByRead.out.bam"
    threads: 4
    shell:
        "samtools sort -n -@ {threads} -o {output} {input}"

# assign multimapping reads
# uses XS tag to determine strand 
rule mmr:
    input:
        bam="bams/{id}.p2.Aligned.sortedByRead.out.bam",
        #gtf=GTF
    output:
        "bams/{id}.mmr.bam"
    threads: 8
    shell:
        "mmr/mmr -S -o {output} -b -t {threads} {input.bam}"

rule sort_index:
    input:
        "bams/{id}.mmr.bam"
    output:
        bam="bams/{id}.mmr.sorted.bam",
        index="bams/{id}.mmr.sorted.bam.bai",
    threads: 4
    shell:
        """
        samtools sort {input} -o {output.bam} -@ {threads}
        samtools index {output.bam}
        """

# -s 0 => uses XS tag to determine strand
rule filter_index_and_calc_juncs:
    input:
        "bams/{id}.mmr.sorted.bam"
    output:
        juncs="bams/{id}.juncs.bed",
        bam="bams/{id}.mmr.sorted.filtered.bam",
        index="bams/{id}.mmr.sorted.filtered.bam.bai"
    params:
        CHROMS
    shell:
        """
        sambamba slice -o {output.bam} {input} {params}
        samtools index {output.bam}
        regtools junctions extract -a 6 -o {output.juncs} -s 0 {output.bam}
        """

rule calc_usage:
    input:
        bam="bams/{id}.mmr.sorted.filtered.bam",
        bed="bams/{id}.juncs.bed",
        annot=GTF
    output:
        "bams/{id}.filtered.SpliSER.tsv"
    params:
        "bams/{id}.filtered"
    shell:
        "python SpliSER/SpliSER_v0.1.3.py process --isStranded -s rf -B {input.bam} -o {params} -b {input.bed} -A {input.annot}"
